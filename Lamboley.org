#+TITLE: Lucas Lamboley's Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/init.el"

* About this file
** What is this file

This file is a org file used by =org-mode= from Emacs.

** How to use this file for configure Emacs ?

You have to create the configuration file using
=M-x org-babel-tangle= (=C-c C-v t=). This will produce
the =~/.emacs.d/init.el= used by Emacs. Using this method allow
us to write a tidy configuration using =org-mode= without
loading the entire org file.

* Configuration
** Emacs's top header package

This is necessary for flycheck, he will throw an error if it is
not there.

#+BEGIN_SRC emacs-lisp
;;; init.el --- Emacs configuration
;;; Commentary:
;;; Code:
#+END_SRC

** Starting up
*** Configuring packages

We use =use-package= to isolate package configuration
for better performance at startup time. =use-package= can also
download a package if he is not present locally.

#+BEGIN_SRC emacs-lisp
(package-initialize)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))
#+END_SRC

*** Benchmark

#+BEGIN_SRC emacs-lisp
(defun my/show-startup-time ()
  "Show Emacs's startup time in the minibuffer"
  (message "Startup time: %s seconds."
    (emacs-uptime "%s")))

(add-hook 'emacs-startup-hook 'my/show-startup-time 'append)
#+END_SRC

*** Private

Keep sensitive information in a separate file.

#+BEGIN_SRC emacs-lisp
(defvar my-private-file (expand-file-name "private.el" user-emacs-directory))
(load my-private-file 'noerror)
#+END_SRC

*** Custom file

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file 'noerror))
#+END_SRC

*** Libraries

#+BEGIN_SRC emacs-lisp
(use-package dash)
(use-package diminish)
#+END_SRC

** Packages
*** IDO - Interactive Do Things

#+BEGIN_SRC emacs-lisp
(use-package ido
  :diminish ido-mode
  :init
  (progn
    (setq ido-enable-flex-matching t
	  ido-everywhere t)
    (ido-mode 1)))
#+END_SRC

*** Smex

Smex is built on top of IDO and offer completion for =M-x=.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :init
  (smex-initialize)
  :bind (("M-x" . smex)))
#+END_SRC

*** Company

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  (setq tab-always-indent 'complete)
  (add-to-list 'completion-styles 'initials t)
  (setq company-frontends '(company-pseudo-tooltip-frontend
			  company-echo-metadata-frontend))
  (setq-default company-tooltip-align-annotations t
		company-dabbrev-other-buffers 'all
		company-idle-delay 0
		company-minimum-prefix-length 1
		company-tooltip-limit 20)
  (deftheme lamboley-overrides)
  (let ((class '((class color) (min-colors 257)))
      (terminal-class '((class color) (min-colors 89)))))
  (custom-theme-set-faces
    'lamboley-overrides
    `(company-tooltip
      ((t :foreground "#1B1D1E"
	  :background "#F8F8F0"
	  :underline t)))
    `(company-tooltip-selection
      ((t :background "#349B8D"
	  :foreground "#F8F8F0"))))
  :bind (:map company-active-map) ("<tab>" . company-complete-selection))
#+END_SRC

*** Magit

When using  =Git for Windows= :

You should set a =%HOME%= var.
You will have to change the path of your =git.exe= executable.

For pushing see https://github.com/magit/magit/wiki/Pushing-with-Magit-from-Windows:

If you are on Windows with an =http(s)= repository, you will
be prompted with a small GUI BOX for your credential. Ensure to
use =wincred= as a credential helper if the password is bothering you.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :config
  (progn
    (when (equal system-type 'windows-nt)
      (setenv "GIT_ASKPASS" "git-gui--askpass")
      (setq magit-git-executable "D:/Git/bin/git.exe"))
    (setq magit-diff-options '("-b"))))
#+END_SRC

*** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (setq flycheck-check-syntax-automatically '(mode-enabled save)
	flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list))
#+END_SRC

*** Better mode-line

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :init
  (setq sml/theme 'dark)
  (sml/setup))
#+END_SRC

*** Trailing whitespace

#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :diminish whitespace-cleanup-mode
  :init
  (setq-default show-trailing-whitespace nil)
  (add-hook 'after-init-hook 'global-whitespace-cleanup-mode))
#+END_SRC

** Language
*** Perl5

#+BEGIN_SRC emacs-lisp
(mapc
  (lambda (pair)
    (if (eq (cdr pair) 'perl-mode)
      (setcdr pair 'cperl-mode)))
  (append auto-mode-alist interpreter-mode-alist))

(setq cperl-invalid-face nil
      cperl-hairy t
      cperl-indent-level 4
      cperl-indent-parens-as-block t
      cperl-close-paren-offset -4
      cperl-continued-statement-offset 4
      cperl-tab-always-indent t
      cperl-indent-subs-specially nil)
#+END_SRC

*** Lua

#+BEGIN_SRC emacs-lisp
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

(setq lua-indent-level 4)
(setq lua-indent-nested-block-content-align nil)
#+END_SRC

** Generic configuration
*** Hide GUI parts

#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

*** Save desktop

#+BEGIN_SRC emacs-lisp
(setq desktop-path (list user-emacs-directory)
      desktop-auto-save-timeout 600
      desktop-restore-frames t)
(desktop-save-mode 1)
#+END_SRC

*** Backup, save and lock files

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
  `(("." . ,(expand-file-name (concat user-emacs-directory "backup")))))

(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms
  `((".*" ,(expand-file-name (concat user-emacs-directory "auto-save-list")) t)))

(setq create-lockfiles nil)
#+END_SRC

*** History

#+BEGIN_SRC emacs-lisp
(setq savehist-file (expand-file-name (concat user-emacs-directory "savehist")))
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
#+END_SRC

*** Miscellaneous

Remove useless =*scratch*= buffer.

#+BEGIN_SRC emacs-lisp
(if (get-buffer "*scratch*") (kill-buffer "*scratch*"))
#+END_SRC

Always the use y-or-n over yes-or-no because I am lazy.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Show date and time in the =mode-line=.

#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time)
#+END_SRC

Show matching pairs of parantheses and other characters.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

Show line numbers.

#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
#+END_SRC

Show column number in =mode-line=.

#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC

** Emacs's bottom header package

Also necessary for flycheck.

#+BEGIN_SRC emacs-lisp
;;; init.el ends here
#+END_SRC
