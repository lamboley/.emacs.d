#+TITLE: Lucas Lamboley's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/init.el"

* About this file
** What is this file ?

This file is an org file used by =org-mode= from Emacs.

** How to use this file for configure Emacs ?

You have to create the configuration file using
=M-x org-babel-tangle= (=C-c C-v t=). This will produce
the =~/.emacs.d/init.el= used by Emacs. Using this method allow
us to write a tidy configuration using =org-mode= without
loading the entire org file.

* Configuration
** Emacs's top header package

This is necessary for the module =flycheck=. He will throw an error
if it is not there.

#+BEGIN_SRC emacs-lisp
;;; init.el --- Emacs configuration
;;; Commentary:
;;; Code:
#+END_SRC

** Starting up
*** Avoid loading outdated elisp file

Since Emacs 24.4, this option allow to load an =.el= file if
the =.elc= is outdated. =auto-compile= library should be used
in completion of this option to compile the elisp file loaded.

#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC

*** Setting up the package =use-package=

We use =use-package= to isolate package configuration in a way that
is both performance-oriented and tidy.

#+BEGIN_SRC emacs-lisp
(package-initialize)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))
#+END_SRC

*** Setting up the package =auto-compile=

This will compile any =.el= file before they are loaded or when they are
saved. This package guarantee that Emacs never loads outdated byte
code files.

By default, we hide the =Compile-Log= buffer, use =M-x auto-compile-display-log=
to display it.

#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config
  (setq auto-compile-display-buffer nil)
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))
#+END_SRC

*** Installing =diminish= library

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC

*** Benchmark init time

#+BEGIN_SRC emacs-lisp
(defun my-show-init-time ()
  "Show Emacs's init time in the buffer Messages"
  (message "init completed in %.2fms"
	   (* 1000.0 (float-time
		      (time-subtract after-init-time before-init-time)))))

(add-hook 'after-init-hook 'my-show-init-time)
#+END_SRC

*** Load custom file if exist

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-readable-p custom-file)
  (load custom-file))
#+END_SRC

*** Private data

Keep sensitive information such as password in a separate file.

#+BEGIN_SRC emacs-lisp
(defvar my-private-file (expand-file-name "private.el" user-emacs-directory))
(when (file-readable-p my-private-file)
  (load my-private-file))
#+END_SRC

** Enhancing Emacs
*** Setting up =Ibuffer=

=Ibuffer= is an advanced replacement for =BufferMenu=.

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :config
  (setq-default ibuffer-show-empty-filter-groups nil)
  (require 'ibuf-ext)
  (add-to-list 'ibuffer-never-show-predicates "^\\*")

  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (file-size-human-readable (buffer-size)))

  (setq ibuffer-formats
	'((mark modified read-only " "
		(name 18 18 :left :elide)
		" "
		(size-h 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" "
		filename-and-process)))
  :bind (("C-x C-b" . ibuffer)))
#+END_SRC

*** Flycheck

Disable =flycheck= on the fly, use it only when we save the buffer.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (setq flycheck-check-syntax-automatically '(mode-enabled save)
	flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list)
  (add-hook 'after-init-hook 'global-flycheck-mode))
#+END_SRC

*** Setting up IDO (Interactive Do Things) with Smex

#+BEGIN_SRC emacs-lisp
(use-package ido
  :diminish ido-mode
  :init
  (setq ido-enable-flex-matching t
	ido-everywhere t)
  (use-package ido-completing-read+
    :commands ido-ubiquitous-mode)
  (use-package smex
    :init
    (setq smex-history-length 10
	  smex-flex-matching t)
    :config
    (smex-initialize)
    :bind
    (("M-x" . smex)))
  :config
  (ido-mode 1))
#+END_SRC

*** Company
**** Setting up =company-mode=

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :init
  (setq tab-always-indent 'complete)
  (add-to-list 'completion-styles 'initials t)
  (setq company-frontends '(company-pseudo-tooltip-frontend
			  company-echo-metadata-frontend))
  (setq-default company-tooltip-align-annotations t
		company-dabbrev-other-buffers 'all
		company-idle-delay 0
		company-minimum-prefix-length 1
		company-tooltip-limit 20)
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (deftheme lamboley-overrides)
  (let ((class '((class color) (min-colors 257)))
	(terminal-class '((class color) (min-colors 89)))))
  (custom-theme-set-faces
   'lamboley-overrides
   `(company-tooltip
     ((t :foreground "#1B1D1E"
	 :background "#F8F8F0"
	 :underline t)))
   `(company-tooltip-selection
     ((t :background "#349B8D"
	 :foreground "#F8F8F0"))))
  :bind (:map company-active-map) ("<tab>" . company-complete-selection))
#+END_SRC

**** Setting up =company-lua=

#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Undo tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-timestamps t
	undo-tree-visualizer-diff t))
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (setq-default projectile-mode-line-prefix " Proj")
  (add-hook 'after-init-hook 'projectile-mode)
  :bind (:map projectile-mode-map ("C-c p" . projectile-command-map)))

;; ibuffer-projectile ?
#+END_SRC

*** Magit

If you are on Windows with an =http(s)= repository, you will
be prompted with a small GUI BOX for your credential. Ensure to
use =wincred= as a credential helper if the popups bother you.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (setq magit-diff-options '("-b"))
  (setq magit-refresh-status-buffer nil)
  (when (equal system-type 'windows-nt)
    (setenv "GIT_ASKPASS" "git-gui--askpass")
    (setq magit-git-executable "C:/Program Files/Git/bin/git.exe"))
  :bind (("C-x t" . magit-status)))
#+END_SRC

*** origami

#+BEGIN_SRC emacs-lisp
(use-package origami
  :bind
  (:map origami-mode-map ("C-c F" . origami-recursively-toggle-node))
  (:map origami-mode-map ("C-c f" . origami-toggle-all-nodes)))
#+END_SRC

*** Better mode-line

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :init
  (setq sml/theme 'dark)
  (sml/setup))
#+END_SRC

** Enhance editing
*** Default Indent

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

*** Easier access for specific file

Add a shortkey on =C-x j= to open specific file.

#+BEGIN_SRC emacs-lisp
(defun my-shortkey-frequent-file (choice)
  (interactive)
  (cond
   ((eq choice ?o)
    (find-file "~/.emacs.d/Lamboley.org"))
   (t (message "Quit"))))

(global-set-key (kbd "C-x j") 'my-shortkey-frequent-file)
#+END_SRC

*** Trailing whitespace

#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :diminish whitespace-cleanup-mode
  :config
  (setq-default show-trailing-whitespace nil)
  (add-hook 'after-init-hook 'global-whitespace-cleanup-mode))
#+END_SRC

*** Show line and column numbers

#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
(column-number-mode 1)
#+END_SRC

*** Final newline

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

*** Show matching paren

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Programming language
*** Markdown

Support for the Markdown language.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown"))
#+END_SRC

*** CSV

Support for the CSV language.

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :commands csv-mode
  :mode "\\.[Cc][Ss][Vv]\\'"
  :init
  (setq csv-separators '("," ";" "|" " ")))
#+END_SRC

*** Perl5

Support for Perl5 language. We use =cperl-mode= over =perl-mode=.

#+BEGIN_SRC emacs-lisp
(mapc
  (lambda (pair)
    (if (eq (cdr pair) 'perl-mode)
      (setcdr pair 'cperl-mode)))
  (append auto-mode-alist interpreter-mode-alist))

(setq cperl-invalid-face nil
      cperl-hairy t
      cperl-indent-level 4
      cperl-indent-parens-as-block t
      cperl-close-paren-offset -4
      cperl-continued-statement-offset 4
      cperl-tab-always-indent t
      cperl-indent-subs-specially nil)
#+END_SRC

*** Lua

Support for Lua language.

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :commands lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua"
  :init
  (setq lua-indent-level 2))
#+END_SRC

** Setting up =org-mode=

*** TODO Setup org-mode

*** Better default behavior

#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
(setq org-log-done 'time)
#+END_SRC

*** Disable =flycheck= when editing block source

#+BEGIN_SRC emacs-lisp
(defun my-disable-fylcheck-in-org-src-block ()
  (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

(add-hook 'org-src-mode-hook 'my-disable-fylcheck-in-org-src-block)
#+END_SRC

** Generic configuration
*** Hide GUI parts

#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

*** Restore session

#+BEGIN_SRC emacs-lisp
(setq desktop-path (list user-emacs-directory)
      desktop-auto-save-timeout 600)
(desktop-save-mode 1)

(use-package session)
(setq session-save-file-coding-system 'utf-8)
(setq session-name-disable-regexp "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)")
(add-hook 'after-init-hook 'session-initialize)
#+END_SRC

*** Backup, save and lock files

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
  `(("." . ,(expand-file-name (concat user-emacs-directory "backup")))))

(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms
  `((".*" ,(expand-file-name (concat user-emacs-directory "auto-save-list")) t)))

(setq create-lockfiles nil)
#+END_SRC

*** History

#+BEGIN_SRC emacs-lisp
(setq savehist-file (expand-file-name (concat user-emacs-directory "savehist")))
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
#+END_SRC

*** Miscellaneous

Always use y-or-n over yes-or-no because it is shorter.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Show date and time in the =mode-line=.

#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time)
#+END_SRC

** Emacs's bottom header package

Also necessary for flycheck.

#+BEGIN_SRC emacs-lisp
;;; init.el ends here
#+END_SRC
