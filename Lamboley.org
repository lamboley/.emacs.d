#+TITLE: Lucas Lamboley's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/init.el"

* About this file
** What is this file ?

This file is an org file used by =org-mode= from Emacs.

** How to use this file for configure Emacs ?

You have to create the configuration file using
=M-x org-babel-tangle= (=C-c C-v t=). This will produce
the =~/.emacs.d/init.el= used by Emacs. Using this method allow
us to write a tidy configuration using =org-mode= without
loading the entire org file.

* Configuration
** Emacs's top header package

This is necessary for the module =flycheck=. He will throw an error
if it is not there.

#+BEGIN_SRC emacs-lisp
;;; init.el --- Emacs configuration
;;; Commentary:
;;; Code:
#+END_SRC

** Starting up
*** Emacs initialisation

Store emacs start time for later use.

#+BEGIN_SRC emacs-lisp
(defconst emacs-start-time (current-time))
#+END_SRC

Disable file name handler and reduce garbage collection during startup

#+BEGIN_SRC emacs-lisp
(defvar file-name-handler-alist-old file-name-handler-alist)

(setq package-enable-at-startup nil
      file-name-handler-alist nil
      message-log-max 16384
      gc-cons-threshold 402653184
      gc-cons-percentage 0.6
      auto-window-vscroll nil)

(add-hook 'after-init-hook
          `(lambda ()
             (setq file-name-handler-alist file-name-handler-alist-old
                   gc-cons-threshold 800000
                   gc-cons-percentage 0.1)
             (garbage-collect)) t)
#+END_SRC

*** Utility function

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (defun emacs-path (path)
    (expand-file-name path user-emacs-directory)))
#+END_SRC

*** Avoid loading outdated elisp file

Since Emacs 24.4, this option allow to load an =.el= file if
the =.elc= is outdated. =auto-compile= library should be used
in completion of this option to compile the elisp file loaded.

#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC

*** Setting up the package =use-package=

We use =use-package= to isolate package configuration in a way that
is both performance-oriented and tidy.

#+BEGIN_SRC emacs-lisp
(package-initialize)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package)

  (setq use-package-verbose nil
        use-package-expand-minimally t
        use-package-always-ensure nil))

(setq disabled-command-function nil)

(eval-when-compile
  (dolist (sym '(flet lisp-complete-symbol))
    (setplist sym (use-package-plist-delete (symbol-plist sym)
                                            'byte-obsolete-info))))
#+END_SRC

*** Setting up the package =auto-compile=

This will compile any =.el= file before they are loaded or when they are
saved. This package guarantee that Emacs never loads outdated byte
code files.

#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))
#+END_SRC

*** Installing library

#+BEGIN_SRC emacs-lisp
(use-package async    :defer t)
(use-package dash     :defer t)
(use-package deferred :defer t)
(use-package diminish :demand t)
(use-package popup    :defer t)
#+END_SRC

*** Load custom file if exist

#+BEGIN_SRC emacs-lisp
(setq custom-file (emacs-path "custom.el"))
(when (file-readable-p custom-file)
  (load custom-file))
#+END_SRC

*** Private data

Keep sensitive information such as password in a separate file.

#+BEGIN_SRC emacs-lisp
(defvar my-private-file (emacs-path "private.el"))
(when (file-readable-p my-private-file)
  (load my-private-file))
#+END_SRC

** Enhancing Emacs
*** Replacement for =BufferMenu=
**** Ibuffer Mode

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer)
  :config    
  (setq ibuffer-show-empty-filter-groups nil)

  (define-ibuffer-column size-h (:name "Size" :inline t)
    (file-size-human-readable (buffer-size)))

  (setq ibuffer-formats
	'((mark modified read-only " "
		(name 18 18 :left :elide)
		" "
		(size-h 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" "
		filename-and-process)))
  
  (defadvice ibuffer-update-title-and-summary (after remove-column-titles)
    (save-excursion
      (set-buffer "*Ibuffer*")
      (toggle-read-only 0)
      (goto-char 1)
      (search-forward "-\n" nil t)
      (delete-region 1 (point))
      (let ((window-min-height 1)) 
        (shrink-window-if-larger-than-buffer))
      (toggle-read-only)))
  
  (ad-activate 'ibuffer-update-title-and-summary))

#+END_SRC

**** ibuffer-ext

This allow to hide emacs special buffer in =Ibuffer=

#+BEGIN_SRC emacs-lisp
(use-package ibuf-ext
  :after ibuffer
  :demand t  
  :config 
  (add-to-list 'ibuffer-never-show-predicates "^\\*"))
#+END_SRC

**** ibuffer-vc

#+BEGIN_SRC emacs-lisp
(use-package ibuffer-vc
  :after ibuffer
  :preface
  (defun ibuffer-set-up-preferred-filters ()
    (ibuffer-vc-set-filter-groups-by-vc-root)
    (unless (eq ibuffer-sorting-mode 'filename/process)
      (ibuffer-do-sort-by-filename/process)))
  :hook (ibuffer . ibuffer-set-up-preferred-filters))
#+END_SRC

*** Check syntax on the fly
**** Flycheck Mode

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :commands (flycheck-mode
             flycheck-next-error
             flycheck-previous-error)
  :init
  (dolist (where '((emacs-lisp-mode-hook . emacs-lisp-mode-map)
                   (lua-mode-hook        . lua-mode-map)
                   (cperl-mode-hook      . cperl-mode-map)))
    (add-hook (car where)
              `(lambda ()
                 (bind-key "M-n" #'flycheck-next-error ,(cdr where))
                 (bind-key "M-p" #'flycheck-previous-error ,(cdr where)))))
  :config
  (defalias 'show-error-at-point-soon
    'flycheck-show-error-at-point)

  (defun magnars/adjust-flycheck-automatic-syntax-eagerness ()
    "Adjust how often we check for errors based on if there are any.
  This lets us fix any errors as quickly as possible, but in a
  clean buffer we're an order of magnitude laxer about checking."
    (setq flycheck-idle-change-delay
          (if flycheck-current-errors 0.3 3.0)))

  (make-variable-buffer-local 'flycheck-idle-change-delay)
  (add-hook 'flycheck-after-syntax-check-hook
            #'magnars/adjust-flycheck-automatic-syntax-eagerness)
  (setq-default flycheck-check-syntax-automatically '(save
                                                      idle-change
                                                      mode-enabled))
  (defun flycheck-handle-idle-change ()
  "Handle an expired idle time since the last change.
  This is an overwritten version of the original
  flycheck-handle-idle-change, which removes the forced deferred.
  Timers should only trigger inbetween commands in a single
  threaded system and the forced deferred makes errors never show
  up before you execute another command."
    (flycheck-clear-idle-change-timer)
    (flycheck-buffer-automatically 'idle-change)))
#+END_SRC

**** Checker for the metadata in elisp

#+BEGIN_SRC emacs-lisp
(use-package flycheck-package
  :after flycheck)
#+END_SRC

*** Completion of things 
**** Ido Mode

#+BEGIN_SRC emacs-lisp
(use-package ido
  :diminish ido-mode
  :demand t
  :custom
  (ido-enable-flex-matching t)
  (ido-everywhere t)
  :config
  (ido-mode 1))
#+END_SRC

**** ido-completing-read

#+BEGIN_SRC emacs-lisp
(use-package ido-completing-read+
  :after ido
  :commands ido-ubiquitous-mode)
#+END_SRC

**** Smex for M+x

#+BEGIN_SRC emacs-lisp
(use-package smex
  :defer 5
  :commands smex
  :bind ("M-x" . smex)
  :config
  (setq smex-history-length 1000
        smex-save-file (emacs-path ".smex")))
#+END_SRC

*** Company
**** Setting up =company-mode=

#+BEGIN_SRC emacs-lisp
(use-package company
  :defer 5  
  :diminish
  :bind (:map company-active-map) ("<tab>" . company-complete-selection)  
  :custom-face
  (company-tooltip ((t :foreground "#1B1D1E"
                       :background "#F8F8F0"
                       :underline t)))
  (company-tooltip-selection ((t :background "#349B8D"
                                 :foreground "#F8F8F0")))
  :config
  (setq company-frontends '(company-pseudo-tooltip-frontend
                            company-echo-metadata-frontend))
  (setq company-tooltip-align-annotations t
        company-idle-delay 0
        company-minimum-prefix-length 2)
  (global-company-mode 1))
#+END_SRC

*** Undo tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :defer 5
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-timestamps t
	undo-tree-visualizer-diff t))
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer 5
  :diminish
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (projectile-global-mode))
#+END_SRC

*** Magit

If you are on Windows with an =http(s)= repository, you will
be prompted with a small GUI BOX for your credential. Ensure to
use =wincred= as a credential helper if the popups bother you.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x v d" . magit-status)
  :config
  (setq magit-refresh-status-buffer nil)
  (when (equal system-type 'windows-nt)
    (setenv "GIT_ASKPASS" "git-gui--askpass")
    (setq magit-git-executable my-private-git-path)))
#+END_SRC

*** Winner-mode

#+BEGIN_SRC emacs-lisp
(use-package winner
  :unless noninteractive
  :defer 5
  :bind (("M-N" . winner-redo)
         ("M-P" . winner-undo))
  :config
  (winner-mode 1))
#+END_SRC

*** origami

#+BEGIN_SRC emacs-lisp
(use-package origami
  :commands origami-mode)
#+END_SRC

*** Better mode-line

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :config
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'dark)
  (sml/setup))
#+END_SRC

*** Anki

#+BEGIN_SRC emacs-lisp
(use-package anki-editor
  :commands anki-editor-submit)
#+END_SRC

*** Beacon

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :diminish
  :commands beacon-mode)
#+END_SRC

*** Centered cursor

#+BEGIN_SRC emacs-lisp
(use-package centered-cursor-mode
  :commands centered-cursor-mode)
#+END_SRC

*** Colum hl

#+BEGIN_SRC emacs-lisp
(use-package col-highlight
  :commands col-highlight-mode)
#+END_SRC

*** Change cursor

#+BEGIN_SRC emacs-lisp
(use-package cursor-chg
  :commands change-cursor-mode
  :config
  (change-cursor-mode 1)
  (toggle-cursor-type-when-idle 1))
#+END_SRC

*** Which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer 5
  :diminish
  :commands which-key-mode
  :config
  (which-key-mode))
#+END_SRC

*** Windmove

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :bind
  (("<f2> <right>" . windmove-right)
   ("<f2> <left>" . windmove-left)
   ("<f2> <up>" . windmove-up)
   ("<f2> <down>" . windmove-down)))
#+END_SRC

*** Hydra and key-chord
**** Hydra 

For =my-hydra-zoom=, Emacs can't control the font size in a terminal, so
this will not work.

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :defer t  
  :config
  (defhydra my-hydra-key-chord ()
    "Main"
    ("." repeat)
    ("+" text-scale-increase)
    ("-" text-scale-decrease)))
#+END_SRC

**** Key-chord

#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :init
  (setq key-chord-one-key-delay 0.16)
  (key-chord-mode 1)
  (key-chord-define-global "uu" 'undo)
  (key-chord-define-global "kk" 'kill-whole-line)
  (key-chord-define-global "hh" 'my-hydra-key-chord/body))
#+END_SRC

** Enhance editing
*** Default Indent

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

*** Highlight

#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :commands hl-line-mode
  :bind ("M-o h" . hl-line-mode))

;;(use-package hl-line+
;;  :after hl-line)
#+END_SRC

*** Easier access for specific file

Add a shortkey on =C-x j= to open specific file.

#+BEGIN_SRC emacs-lisp
(defun my-shortkey-frequent-file (choice)
  (interactive)
  (cond
   ((eq choice ?o)
    (find-file "~/.emacs.d/Lamboley.org"))
   (t (message "Quit"))))

(global-set-key (kbd "C-x j") 'my-shortkey-frequent-file)
#+END_SRC

*** Smartscan

#+BEGIN_SRC emacs-lisp
(use-package smartscan
  :defer 5
  :config
  (global-smartscan-mode t))
#+END_SRC

*** Smarter begin of line

Copied from http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
#+BEGIN_SRC emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))
  
  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)
#+END_SRC

*** Trailing whitespace

#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :defer 5
  :diminish
  :commands whitespace-cleanup-mode
  :config
  (global-whitespace-cleanup-mode 1))
#+END_SRC

*** Show line and column numbers

#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
(column-number-mode 1)
#+END_SRC

*** Final newline

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

*** Show matching paren

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** Use UTF-8

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

** Programming language
*** Markdown

Support for the Markdown language.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown"))
#+END_SRC

*** CSV

Support for the CSV language.

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'"
  :config
  (setq csv-separators '("," ";" "|" " ")))
#+END_SRC

*** XML

Support for the XML language.

#+BEGIN_SRC emacs-lisp
(use-package nxml-mode
  :commands nxml-mode
  :init
  (defalias 'xml-mode 'nxml-mode)
  :config
  (setq nxml-slash-auto-complete-flag t))
#+END_SRC

*** Eldoc

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :diminish
  :hook (emacs-lisp-mode . eldoc-mode))
#+END_SRC

*** Lua

Support for Lua language.

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua"
  :config
  (setq lua-indent-level 4))
#+END_SRC

*** Perl5

#+BEGIN_SRC emacs-lisp
(use-package cperl-mode
  :mode "\\.[pP][Llm]\\'"
  :interpreter "perl"
  :preface
  (defun my-cperl-mode-hook ()
    (require 'flycheck)
    (flycheck-mode 1)
    
    (setq-local flycheck-check-syntax-automatically nil)
    (setq-local flycheck-highlighting-mode nil))
  :hook (cperl-mode . my-cperl-mode-hook)
  :config
  (setq cperl-invalid-face nil
        cperl-hairy t
        cperl-indent-level 4
        cperl-indent-parens-as-block t
        cperl-close-paren-offset -4
        cperl-continued-statement-offset 4
        cperl-tab-always-indent t
        cperl-indent-subs-specially nil
        cperl-electric-parens-string nil))
#+END_SRC 

** Setting up =org-mode=
*** Set Keybind

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c a") #'org-agenda)))
#+END_SRC

*** Disable =flycheck= when editing block source

Metadata are required for elisp package, so we disable
checker of elisp in block source.

Actually this is useless because I enable =flucheck= only in =cperl-mode=

#+BEGIN_SRC emacs-lisp
(add-hook 'org-src-mode-hook
          (lambda ()
            (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))))
#+END_SRC

*** Better default behavior
    
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
(setq org-log-done 'time)
#+END_SRC

*** Setting up =org-agenda=
**** Generic setting

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (directory-files-recursively "~/personnel/org/" "\.org$"))
#+END_SRC

*** Setting up org-spreadsheet
**** Simulate LHS Column Name Assignments

See [[https://emacs.stackexchange.com/questions/42598/org-table-spreadsheet-use-column-name-on-left-hand-side]]:
#+BEGIN_SRC emacs-lisp
(fset 'simulate-lhs-column-name-assignments [?\C-u ?\C-u ?\C-c ?\C-c M-down])
(global-set-key (kbd "<f6>") 'simulate-lhs-column-name-assignments)
#+END_SRC

** Generic configuration
*** Hide GUI parts

#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

*** Restore session
**** Enable desktop restoration

#+BEGIN_SRC emacs-lisp
(setq desktop-path (list user-emacs-directory)
      desktop-auto-save-timeout 600)
(setq desktop-buffers-not-to-save 'dired-mode)
(desktop-save-mode 1)
#+END_SRC

**** Variable to save in desktop file

#+BEGIN_SRC emacs-lisp
(setq desktop-globals-to-save
      '((dired-regexp-history     . 20)
        (extended-command-history . 30)
        (face-name-history        . 20)
        (file-name-history        . 100)
        (magit-revision-history   . 50)
        (minibuffer-history       . 50)
        (org-clock-history        . 50)
        (org-refile-history       . 50)
        (org-tags-history         . 50)
        (query-replace-history    . 60)
        (read-expression-history  . 60)
        (regexp-history           . 60)
        (regexp-search-ring       . 20)
        register-alist
        (search-ring              . 20)
        (shell-command-history    . 50)
        tags-file-name
        tags-table-list))
#+END_SRC

*** Set directory for backup 

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . ,(emacs-path "backup"))))
#+END_SRC

*** Do not prompt when delete old backup

#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
#+END_SRC

*** Set directory for save-file

#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms `((".*" ,(emacs-path "auto-save-list")) t))
#+END_SRC

*** Disable lockfile

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

*** Recent file

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :defer 10
  :commands (recentf-mode
             recentf-add-file
             recentf-apply-filename-handlers)
  :preface
  (defun recentf-add-dired-directory ()
    (if (and dired-directory
             (file-directory-p dired-directory)
             (not (string= "/" dired-directory)))
        (let ((last-idx (1- (length dired-directory))))
          (recentf-add-file
           (if (= ?/ (aref dired-directory last-idx))
               (substring dired-directory 0 last-idx)
             dired-directory)))))
  :hook (dired-mode . recentf-add-dired-directory)
  :config
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 25)
  (recentf-mode 1))
#+END_SRC

*** Copy filename to clipboard

Copied from https://emacsredux.com/blog/2013/03/27/copy-filename-to-the-clipboard/
#+BEGIN_SRC emacs-lisp
(defun er-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

*** Always use y-or-n over yes-or-no

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Show date and time

#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time)
#+END_SRC

*** Commenting a region

Only in newer version of Emacs.

Copied from https://stackoverflow.com/questions/9688748/emacs-comment-uncomment-current-line
#+BEGIN_SRC emacs-lisp
(defun my-comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)
        (next-line)))

(global-set-key (kbd "C-c q") 'my-comment-or-uncomment-region-or-line)
#+END_SRC

** Finalisation
*** Loading time

#+BEGIN_SRC emacs-lisp
(let ((elapsed (float-time (time-subtract (current-time)
                                          emacs-start-time))))
  (message "Loading %s...done (%.3fs)" load-file-name elapsed))

(add-hook 'after-init-hook
          `(lambda ()
             (let ((elapsed
                    (float-time
                     (time-subtract (current-time) emacs-start-time))))
               (message "Loading %s...done (%.3fs) [after-init]"
                        ,load-file-name elapsed))) t)
#+END_SRC

*** Emacs's bottom header package

Also necessary for flycheck.

#+BEGIN_SRC emacs-lisp
;;; init.el ends here
#+END_SRC

